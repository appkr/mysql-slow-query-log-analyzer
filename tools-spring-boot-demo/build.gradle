plugins {
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
    id 'io.freefair.lombok'
    id 'com.gorylenko.gradle-git-properties'
    id 'org.openapi.generator' version "${openapiGeneratorVersion}"
    id 'com.google.cloud.tools.jib' version "${jibVersion}"
}

sourceCompatibility = '17'

dependencies {

    implementation project(':tools-spring-boot-starter')
//    implementation 'dev.appkr:tools-spring-boot-starter:0.0.1-RELEASE'

    /**
     * BOM, dependency management
     */

    implementation platform("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
    implementation platform("org.zalando:logbook-bom:${logbookVersion}")
    implementation platform("io.sentry:sentry-bom:${sentryVersion}")

    /**
     * Global utilities
     */

    implementation 'org.apache.commons:commons-lang3:3.10'
    annotationProcessor('org.springframework.boot:spring-boot-configuration-processor') {
        exclude group: 'com.vaadin.external.google', module: 'android-json'
    }

    /**
     * Inbound adapters
     */

    // web
    implementation('org.springframework.boot:spring-boot-starter-web') {
        exclude module: 'spring-boot-starter-tomcat'
    }
    implementation 'org.springframework.boot:spring-boot-starter-undertow'

    // open-api-spec support packages
    implementation 'io.springfox:springfox-swagger2:3.0.0'
    implementation "org.openapitools:jackson-databind-nullable:${jacksonNullableVersion}"
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-hibernate5-jakarta'
    // OpenApi Bug workaround @see https://github.com/OpenAPITools/openapi-generator/issues/3668
    // For spring-boot 3 @see https://github.com/OpenAPITools/openapi-generator/pull/14402/files#diff-a69d7ddda55ae7f9f544bf415c96590ff4bfe3ecd52b49e519842eaac2b4f045L131
    implementation "io.swagger.core.v3:swagger-annotations:${swaggerAnnotationsVersion}"

    // object validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    /**
     * Outbound adapters
     */

    // jpa & database drivers
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'io.hypersistence:hypersistence-utils-hibernate-60:3.3.2'
    compileOnly 'org.hibernate.orm:hibernate-jpamodelgen:6.1.7.Final'
    annotationProcessor 'org.hibernate.orm:hibernate-jpamodelgen:6.1.7.Final'
    runtimeOnly 'com.mysql:mysql-connector-j'
    testRuntimeOnly 'com.h2database:h2'

    /**
     * Microservice patterns
     */

    // Health check pattern
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // Loging and tracing pattern
    // micrometer bug workaround: Cannot invoke "io.micrometer.tracing.CurrentTraceContext$Scope.close()" because the return value of "io.micrometer.tracing.handler.TracingObservationHandler$TracingContext.getScope()" is null
    // https://github.com/micrometer-metrics/tracing/issues/179
    // https://github.com/micrometer-metrics/micrometer/issues/1910#issuecomment-1462711578
    // https://github.com/micrometer-metrics/tracing/tree/v1.1.0-M1
    implementation 'io.micrometer:micrometer-tracing-bridge-brave'
    implementation 'io.micrometer:micrometer-tracing:latest.integration'

    // sentry
    // @see https://docs.sentry.io/platforms/java/guides/logback/
    implementation 'io.sentry:sentry-logback'
    implementation 'io.sentry:sentry-spring-boot-starter-jakarta'

    // logback extension
    implementation "net.logstash.logback:logstash-logback-encoder:${logstashLogbackEncoderVersion}"
    implementation 'ch.qos.logback.contrib:logback-json-classic:0.1.5'

    // logbook - http request & response logging
    // @see https://github.com/zalando/logbook
    implementation 'org.zalando:logbook-spring-boot-starter'

    /**
     * Test
     */

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        exclude group: 'com.vaadin.external.google', module: 'android-json'
    }
    testImplementation "com.tngtech.archunit:archunit-junit5-api:${archunitVersion}"
    testRuntimeOnly "com.tngtech.archunit:archunit-junit5-engine:${archunitVersion}"
}

if (!org.gradle.internal.os.OperatingSystem.current().isWindows()) {
    processResources {
        filesMatching(['**/application.yaml']) {
            filter {
                it.replace('#project.version#', version)
            }
        }
    }
}

task redoc(type:Exec) {
    // For this to work correctly, `yarn global add redoc`
    commandLine 'npx', 'redoc-cli', 'bundle', "${projectDir}/src/main/resources/swagger/api.yaml", '-o', "${buildDir}/redoc.html"
}

openApiGenerate {
    generatorName = 'spring'
    inputSpec = "${projectDir}/src/main/resources/swagger/api.yaml"
    outputDir = "${buildDir}/openapi".toString()
    apiPackage = 'dev.appkr.tools.demo.rest'
    modelPackage = 'dev.appkr.tools.demo.rest'
    modelNameSuffix = ''
    apiFilesConstrainedTo = ['']
    modelFilesConstrainedTo = ['']
    supportingFilesConstrainedTo = ['ApiUtil.java']
    configOptions = [
            delegatePattern        : 'true',
            useTags                : 'true',
            dateLibrary            : 'java8',
            java8                  : 'true',
            hideGenerationTimestamp: 'true',
            useSpringBoot3         : 'true',
            useJakartaEe           : 'true'
    ]
    validateSpec = true
}

jib {
    from {
        image = 'amazoncorretto:17-alpine-jdk'
    }

    to {
        image = "${project.name}"
        tags = ['latest', "${project.version}".toString(), buildRevision]
    }

    // If set to packaged, puts the JAR artifact built by the Gradle Java plugin into the final image.
    // If set to exploded (default), containerizes individual .class files and resources files.
    containerizingMode = 'packaged'

    container {
        jvmFlags = [
                // Java9 container support @see https://www.eclipse.org/openj9/docs/xxusecontainersupport/
                '-XX:+UseContainerSupport',
                // for G1GC @see https://www.oracle.com/technical-resources/articles/java/g1gc.html
                '-XX:+UseG1GC',
                '-XX:+HeapDumpOnOutOfMemoryError',
                '-XX:HeapDumpPath=/tmp',
                '-Djava.net.preferIPv4Stack=true',
                '-Duser.timezone=Asia/Seoul',
                '-Dfile.encoding=UTF8',
                '-Dsun.net.inetaddr.ttl=30'
        ]
        ports = ['8080']
        creationTime = 'USE_CURRENT_TIMESTAMP'
    }
}

sourceSets {
    main.java.srcDir layout.buildDirectory.file('openapi/src/main/java')
}

compileJava.dependsOn('openApiGenerate')
